package sh.insane.pawn.code;

public enum OpCode {
    LOAD_PRI(1, 4),
    LOAD_ALT(2, 4),
    LOAD_S_PRI(3, 4),
    LOAD_S_ALT(4, 4),
    LREF_PRI(5, 4),
    LREF_ALT(6, 4),
    LREF_S_PRI(7, 4),
    LREF_S_ALT(8, 4),
    LOAD_I(9),
    LODB_I(10, 4),
    CONST_PRI(11, 4),
    CONST_ALT(12, 4),
    ADDR_PRI(13, 4),
    ADDR_ALT(14, 4),
    STOR_PRI(15, 4),
    STOR_ALT(16, 4),
    STOR_S_PRI(17, 4),
    STOR_S_ALT(18, 4),
    SREF_PRI(19, 4),
    SREF_ALT(20, 4),
    SREF_S_PRI(21, 4),
    SREF_S_ALT(22, 4),
    STOR_I(23),
    STRB_I(24, 4),
    LIDX(25),
    LIDX_B(26, 4),
    IDXADDR(27),
    IDXADDR_B(28, 4),
    ALIGN_PRI(29, 4),
    ALIGN_ALT(30, 4),
    LCTRL(31, 4),
    SCTRL(32, 4),
    MOV_PRI(33),
    MOV_ALT(34),
    XCHG(35),
    PUSH_PRI(36),
    PUSH_ALT(37),
    PUSH_R(38, 4),
    PUSH_C(39, 4),
    PUSH(40, 4),
    PUSH_S(41, 4),
    POP_PRI(42, 4),
    POP_ALT(43),
    STACK(44, 4),
    HEAP(45, 4),
    PROC(46),
    RET(47),
    RETN(48),
    CALL(49, 4),
    CALL_PRI(50),
    JUMP(51, 4),
    JREL(52, 4),
    JZER(53, 4),
    JNZ(54, 4),
    JEQ(55, 4),
    JNEQ(56, 4),
    JLESS(57, 4),
    JLEQ(58, 4),
    JGRTR(59, 4),
    JGEQ(60, 4),
    JSLESS(61, 4),
    JSLEQ(62, 4),
    JSGRTR(64, 4),
    JSGEQ(64, 4),
    SHL(65),
    SHR(66),
    SSHR(67),
    SHL_C_PRI(68, 4),
    SHL_C_ALT(69, 4),
    SHR_C_PRI(70, 4),
    SHR_C_ALT(71, 4),
    SMUL(72),
    SDIV(73),
    SDIV_ALT(74),
    UMUL(75),
    UDIV(76),
    UDIV_ALT(77),
    ADD(78),
    SUB(79),
    SUB_ALT(80),
    AND(81),
    OR(82),
    XOR(83),
    NOT(84),
    NEG(85),
    INVERT(86),
    ADDC_C(87, 4),
    SMUL_C(88, 4),
    ZERO_PRI(89),
    ZERO_ALT(90),
    ZERO(91, 4),
    ZERO_S(92, 4),
    SIGN_PRI(93),
    SIGN_ALT(94),
    EQ(95),
    NEQ(96),
    LESS(97),
    LEQ(98),
    GRTR(99),
    GEQ(100),
    SLESS(101),
    SLEQ(102),
    SGRTR(103),
    SGEQ(104),
    EQ_C_PRI(105, 4),
    EQ_C_ALT(106, 4),
    INC_PRI(107),
    INC_ALT(108),
    INC(109, 4),
    INC_S(110, 4),
    INC_I(111),
    DEC_PRI(112),
    DEC_ALT(113),
    DEC(114, 4),
    DEC_S(115, 4),
    DEC_I(116),
    MOVS(117, 4),
    CMPS(118, 4),
    FILL(119, 4),
    HALT(120, 4),
    BOUNDS(121, 4),
    SYSREQ_PRI(122),
    SYSREQ_C(123, 4),
    UMP_PRI(128),
    SWITCH(129, 4),
    CASETBL(130, 4),
    SWAP_PRI(131),
    SWAP_ALT(132),
    PUSH_ADDR(133, 4),
    NOP(134),
    BREAK(137);

    public final int instruction;
    public final int operandSize;

    OpCode(int instruction, int operandSize) {
        this.instruction = instruction;
        this.operandSize = operandSize;
    }

    OpCode(int instruction) {
        this(instruction, 0);
    }

    public static OpCode getFromInstruction(int instruction) {
        for(OpCode opcode : OpCode.values()) {
            if(opcode.instruction == instruction) {
                return opcode;
            }
        }

        return null;
    }
}
